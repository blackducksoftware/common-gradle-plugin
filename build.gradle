buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'signing'
    id 'eclipse'
    id 'com.jfrog.artifactory' version '4.9.3'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'io.codearte.nexus-staging' version '0.20.0'
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile) { options.encoding = 'UTF-8' }

group = 'com.blackducksoftware.integration'
version = '0.0.64'
description = 'A common plugin for all integration libraries and solutions to use.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
}

dependencies {
    implementation gradleApi()

    //https://www.jfrog.com/confluence/display/RTF/Gradle+Artifactory+Plugin
    //https://github.com/JFrogDev/build-info/tree/master/build-info-extractor-gradle
    implementation 'org.jfrog.buildinfo:build-info-extractor-gradle:4.9.3'

    //https://github.com/hierynomus/license-gradle-plugin
    implementation 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'

    //https://github.com/kt3k/coveralls-gradle-plugin
    implementation 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'

    //https://github.com/Codearte/gradle-nexus-staging-plugin
    implementation 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0'

    //https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Gradle
    //https://plugins.gradle.org/plugin/org.sonarqube
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.0.1622'
}

configurations.all { resolutionStrategy { force 'org.codehaus.groovy:groovy-all:+' } }

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

license {
    headerURI = new URI('https://blackducksoftware.github.io/integration-resources/project/HEADER.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.projectName = project.name
    ignoreFailures = true
    includes(['**/*.groovy', '**/*.java'])
    excludes(['/src/test/*.groovy',
              'src/test/*.java'])
}

tasks.getByName('build').dependsOn(licenseFormatMain)

nexusStaging {
    packageGroup = 'com.blackducksoftware'
    username = sonatypeUsername
    password = sonatypePassword
}

closeRepository.onlyIf {
    !project.version.endsWith('-SNAPSHOT')
}

releaseRepository.onlyIf {
    !project.version.endsWith('-SNAPSHOT')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.name
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = rootProject.name
                description = rootProject.description
                url = "https://www.github.com/blackducksoftware/${rootProject.name}"
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id = 'blackduckoss'
                        name = 'Black Duck OSS'
                        email = 'bdsoss@blackducksoftware.com'
                        organization = 'Black Duck Software, Inc.'
                        organizationUrl = 'http://www.blackducksoftware.com'
                        timezone = 'America/New_York'
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/blackducksoftware/${rootProject.name}.git"
                    developerConnection = "scm:git:git@github.com:blackducksoftware/${rootProject.name}.git"
                    url = "https://www.github.com/blackducksoftware/${rootProject.name}"
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }
}

publish.dependsOn { println "publish will attempt uploading ${project.name}:${project.version} to maven central" }

signing {
    required { gradle.taskGraph.hasTask('publish') }
    sign publishing.publications.mavenJava
}

def artifactoryRepo = artifactorySnapshotRepo
if (!project.version.endsWith('-SNAPSHOT')) {
    artifactoryRepo = artifactoryReleaseRepo
}

artifactory {
    contextUrl = artifactoryUrl
    publish {
        repository {
            repoKey = artifactoryRepo
            username = artifactoryDeployerUsername
            password = artifactoryDeployerPassword
        }
        defaults { publications ('mavenJava') }
    }
    resolve {
        repository {
            repoKey = artifactoryReleaseRepo
        }
    }
}

artifactoryPublish.dependsOn { println "artifactoryPublish will attempt uploading ${project.name}:${project.version} to ${artifactoryUrl}/${artifactoryRepo}" }