buildscript {
    repositories { jcenter() }
    dependencies { classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0' }
}

plugins {
    id 'groovy'
    id 'maven'
    id 'signing'
    id 'eclipse'
    id 'com.jfrog.artifactory' version '4.8.1'
    id 'com.github.hierynomus.license' version '0.14.0'
}

apply plugin: 'io.codearte.nexus-staging'

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile) { options.encoding = 'UTF-8' }

group = 'com.blackducksoftware.integration'
version = '0.0.49'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
}

dependencies {
    implementation gradleApi()

    //https://www.jfrog.com/confluence/display/RTF/Gradle+Artifactory+Plugin
    //https://github.com/JFrogDev/build-info/tree/master/build-info-extractor-gradle
    implementation 'org.jfrog.buildinfo:build-info-extractor-gradle:4.9.0'

    //https://github.com/hierynomus/license-gradle-plugin
    implementation 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'

    //https://github.com/kt3k/coveralls-gradle-plugin
    implementation 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'

    //https://github.com/Codearte/gradle-nexus-staging-plugin
    implementation 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0'

    //https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Gradle
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.0.1622'
}

configurations.all { resolutionStrategy { force 'org.codehaus.groovy:groovy-all:+' } }

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

license {
    headerURI = new URI('https://blackducksoftware.github.io/common-gradle-plugin/HEADER.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.projectName = project.name
    ignoreFailures = true
    includes(['**/*.groovy', '**/*.java'])
    excludes(['/src/test/*.groovy',
              'src/test/*.java'])
}

tasks.getByName('build').dependsOn(licenseFormatMain)

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

nexusStaging { packageGroup = 'com.blackducksoftware' }

closeRepository.onlyIf {
    !project.version.endsWith('-SNAPSHOT')
}

releaseRepository.onlyIf {
    !project.version.endsWith('-SNAPSHOT')
}

def artifactoryRepo = artifactorySnapshotRepo
if (!project.version.endsWith('-SNAPSHOT')) {
    artifactoryRepo = artifactoryReleaseRepo
}

artifactory {
    contextUrl = artifactoryUrl
    publish {
        repository {
            repoKey = artifactoryRepo
            username = artifactoryDeployerUsername
            password = artifactoryDeployerPassword
        }
        defaults { publishConfigs('archives') }
    }
    resolve {
        repository {
            repoKey = artifactoryReleaseRepo
        }
    }
}

artifactoryPublish.dependsOn { println "artifactoryPublish will attempt uploading ${project.name}:${project.version} to ${artifactoryRepo}" }

uploadArchives.dependsOn { println "uploadArchives will attempt uploading ${project.name}:${project.version} to maven central" }

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                name rootProject.name
                description rootProject.description
                url "https://www.github.com/blackducksoftware/${rootProject.name}"
                packaging 'jar'
                scm {
                    connection "scm:git:git://github.com/blackducksoftware/${rootProject.name}.git"
                    developerConnection "scm:git:git@github.com:blackducksoftware/${rootProject.name}.git"
                    url "https://www.github.com/blackducksoftware/${rootProject.name}"
                }
                licenses {
                    license {
                        name 'Apache License 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id 'blackduckoss'
                        name 'Black Duck OSS'
                        email 'bdsoss@blackducksoftware.com'
                        organization 'Black Duck Software, Inc.'
                        organizationUrl 'http://www.blackducksoftware.com'
                        roles { role 'developer' }
                        timezone 'America/New_York'
                    }
                }
            }
        }
    }
}